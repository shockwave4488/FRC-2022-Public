import edu.wpi.first.gradlerio.deploy.roborio.RoboRIO

plugins {
    id 'java'
    id 'edu.wpi.first.GradleRIO' version '2022.4.1'
    id 'com.github.sherter.google-java-format' version '0.9'
    id 'com.github.spotbugs' version '5.0.4'
}

repositories {
    mavenCentral()
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

def ROBOT_MAIN_CLASS = 'frc.robot.Main'

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = false

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'junit:junit:4.12'

    compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs.toolVersion.get()}"

    implementation group: 'edu.wpi.first.apriltags', name: 'apriltags-java', version: '2023.1.1-beta-4'
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    implementation group: 'gov.nist.math', name: 'jama', version: '1.0.3'
    testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.9'
    testImplementation group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.9'
    testImplementation group: 'commons-io', name: 'commons-io', version: '2.4'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Spotbugs settings
spotbugsMain {
    ignoreFailures = false
    excludeFilter = file('spotbugsExclusions.xml')
}

googleJavaFormat {
    toolVersion = '1.15.0'
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
    reports {
        xml {
            required.set(false)
        }
        html {
            required.set(true)
        }
    }
}

class SetSimulationConfig extends DefaultTask {
    @InputDirectory
    File configDir

    SetSimulationConfig () {
        description  = 'Sets the configuration directory to use in simulation and simulates the robot code'
    }

    @Option(option = 'configDir', description = 'Set the directory of the preferences/robot configuration.')
    void setConfigDir(final String dir) {
        configDir = project.file(dir)
    }

    @TaskAction
    def writeDirToFile() {
        if (!List.of(configDir.list()).contains('Preferences.json')) {
            throw new IllegalArgumentException('No preferences file in directory: ' + configDir)
        }
        
        File simPrefsPathFile = project.file('simulation/configDir.txt')
        if (!simPrefsPathFile.exists()) {
            if (!simPrefsPathFile.getParentFile().exists()) {
                simPrefsPathFile.getParentFile().mkdirs()
            }
            simPrefsPathFile.createNewFile()
        } else {
            simPrefsPathFile.text = ''
        }

        simPrefsPathFile << configDir
    }
}

tasks.register('simulate', SetSimulationConfig) {
    finalizedBy simulateJava
}
